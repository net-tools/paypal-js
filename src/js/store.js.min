'use strict';if("object"!=typeof NTPaypal)throw Error("client.js script is mandatory and a dependency of store.js");NTPaypal.Store=function(a){this.inventory=new NTPaypal.Inventory(a)};NTPaypal.Store.fromJson=function(a){if("string"!=typeof a)throw new TypeError("'jsonString' parameter of 'Store.fromJson' static method is not a string");a=JSON.parse(a);var b=Object.create(NTPaypal.Store.prototype);b.inventory=NTPaypal.Inventory.fromJson(a.inventory);return b};NTPaypal.Store.prototype.get=function(a){return this.inventory.get(a)};
NTPaypal.Store.prototype.contains=function(a){return this.inventory.contains(a)};NTPaypal.Store.prototype.addToCart=function(a,b){if(!(b instanceof NTPaypal.Cart))throw new TypeError("'cart' parameter of 'Store.addToCart' method is not a Cart instance");a=this.get(a);return 0<a.quantity?(b.add(a.product,1),a.quantity--,!0):!1};
NTPaypal.Store.prototype.removeFromCart=function(a,b){if(!(b instanceof NTPaypal.Cart))throw new TypeError("'cart' parameter of 'Store.removeFromCart' method is not a Cart instance");var c=this.get(a);c.quantity+=b.get(a).quantity;b.remove(a)};
NTPaypal.Store.prototype.setCartQuantity=function(a,b,c){if(!(c instanceof NTPaypal.Cart))throw new TypeError("'cart' parameter of 'Store.setCartQuantity' method is not a Cart instance");var e=this.get(a),d=e.quantity+c.get(a).quantity;if(b>d)return!1;c.setQuantity(a,b);e.quantity=d-b;return!0};
NTPaypal.Store.prototype.updateCartQuantity=function(a,b,c){if(!(c instanceof NTPaypal.Cart))throw new TypeError("'cart' parameter of 'Store.updateCartQuantity' method is not a Cart instance");b=c.get(a).quantity+b;return 0==b?(this.removeFromCart(a,c),!0):this.setCartQuantity(a,b,c)};
NTPaypal.BrowserStorage=class{set(a,b){throw Error("'set' method not implemented in class '"+this.constructor.name+"'");}get(a){throw Error("'get' method not implemented in class '"+this.constructor.name+"'");}delete(a){throw Error("'delete' method not implemented in class '"+this.constructor.name+"'");}test(a){return null!=this.get(a)}};NTPaypal.LocalStorage=class extends NTPaypal.BrowserStorage{set(a,b){return window.localStorage.setItem(a,b)}get(a){return window.localStorage.getItem(a)}delete(a){return window.localStorage.removeItem(a)}};
NTPaypal.SessionStorage=class extends NTPaypal.BrowserStorage{set(a,b){return window.sessionStorage.setItem(a,b)}get(a){return window.sessionStorage.getItem(a)}delete(a){return window.sessionStorage.removeItem(a)}};NTPaypal.CookiesStorage=class extends NTPaypal.BrowserStorage{set(a,b){return nettools.jscore.setCookie(a,b)}get(a){return nettools.jscore.getCookie(a)}delete(a){return nettools.jscore.deleteCookie(a)}};
NTPaypal.Session=function(a,b,c,e){this.storage=new a;if(!(this.storage instanceof NTPaypal.BrowserStorage))throw new TypeError("'browserIntf' parameter of 'Session' object constructor is not a constructor inheriting from 'BrowserStorage'");if(!(b instanceof NTPaypal.Shop))throw new TypeError("'shop' parameter of 'Session' constructor is not a Shop instance");if(!(c instanceof NTPaypal.Cart))throw new TypeError("'cart' parameter of 'Session' constructor is not a Cart instance");if(e&&!(e instanceof
NTPaypal.Store))throw new TypeError("'store' parameter of 'Session' constructor is not a Store instance");this.cart=c;this.store=e;this.shop=b};NTPaypal.Session.prototype.delete=function(){this.storage.delete(this.shop.shopid+".cart")};NTPaypal.Session.prototype.save=function(){this.storage.set(this.shop.shopid+".cart",JSON.stringify(this.cart))};
NTPaypal.Session.prototype.restore=function(a){var b=this.storage.get(this.shop.shopid+".cart");if(!b)return this.cart=new NTPaypal.Cart([]);this.cart=NTPaypal.Cart.fromJson(b);if(this.store){a||(a=new NTPaypal.SessionStoreInterface);if(!(a instanceof NTPaypal.SessionStoreInterface))throw new TypeError("'storeIntf' parameter of 'Session.restore' method is not an instance of 'SessionStoreInterface'");var c=[],e=!1;this.cart.getContent().forEach(function(d){if(this.store.contains(d.product.sku)&&0!=
this.store.get(d.product.sku).quantity){var f=this.store.get(d.product.sku);f.quantity-=d.quantity;0>f.quantity&&(d.quantity+=f.quantity,f.quantity=0,e=!0,a.lowerQuantity(d.product))}else e=!0,c.push(d.product.sku),a.unavailable(d.product)},this);c.forEach(function(d){this.cart.remove(d)},this);e&&this.save()}return this.cart};NTPaypal.Session.prototype.hasData=function(){return this.storage.get(this.shop.shopid+".cart")?!0:!1};
NTPaypal.SessionStoreInterface=function(a,b){this.whenLowerQuantity=a;this.whenUnavailable=b};NTPaypal.SessionStoreInterface.prototype.lowerQuantity=function(a){if(!(a instanceof NTPaypal.Product))throw new TypeError("'product' parameter of 'SessionStoreInterface.lowerQuantity' method is not an instance of 'Product'");"function"!=typeof this.whenLowerQuantity?alert("Product '"+a.title+"' quantity updated to match lower quantity available in store"):this.whenLowerQuantity(a)};
NTPaypal.SessionStoreInterface.prototype.unavailable=function(a){if(!(a instanceof NTPaypal.Product))throw new TypeError("'product' parameter of 'SessionStoreInterface.unavailable' method is not an instance of 'Product'");"function"!=typeof this.whenUnavailable?alert("Product '"+a.title+"' is not currently available in store"):this.whenUnavailable(a)};